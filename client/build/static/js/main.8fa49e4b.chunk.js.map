{"version":3,"sources":["components/update/play.svg","components/update/refresh.svg","components/uploadTwin/uploadTwin.js","components/common/styledProgressBar.js","components/update/update.js","components/fileupload/fileupload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","process","REACT_APP_VM_SERVER","REACT_APP_UPDATE_TWIN","UploadTwin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateTwin","e","preventDefault","_this$state","state","softwareVersion","url","alert","setState","updateTwinLoading","axios","method","headers","Allow-Control-Allow-Origin","Content-Type","data","software_version","then","response","console","log","catch","err","handleInput","_e$target","target","name","value","_this$state2","react_default","a","createElement","onSubmit","class","for","type","id","aria-describedby","placeholder","onChange","className","Component","StyledProgressbar","dist_default","percentage","text","strokeWidth","styles","root","path","stroke","strokeLinecap","transition","trail","fill","fontSize","REACT_APP_GETSTATUS","Update","getStatus","getFirmwareLoading","firmwareStatuses","objectSpread","showStatus","status","index","otaStatus","key","currentVersion","pendingVersion","style","width","styledProgressBar","concat","_this2","uploadTwin_UploadTwin","cursor","data-toggle","href","role","aria-expanded","aria-controls","src","require","alt","data-target","map","title","onClick","REACT_APP_SERVER","REACT_APP_GETBLOBS","REACT_APP_UPLOADBLOB","FileUpload","uploadFirmware","selectedFile","uploadFirmwareLoading","formData","FormData","append","post","content-type","message","getBlobDetails","error","document","getElementById","getBlobsLoading","blobs","showBlob","blob","scope","handleselectedFile","event","files","accept","update_Update","App","BrowserRouter","Switch","Route","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fa49e4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.25419525.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.e41d1185.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./uploadTwin.css\";\r\nconst { REACT_APP_VM_SERVER, REACT_APP_UPDATE_TWIN } = process.env;\r\n\r\nexport default class UploadTwin extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      softwareVersion: \"1.0.0.006\",\r\n      updateTwinLoading: false,\r\n      url: \"https://wrdm2chetanpackage.blob.core.windows.net/wrdm2-package-file-chetan/package.tar.gz\"\r\n    }\r\n  }\r\n  updateTwin = (e) => {\r\n    e.preventDefault();\r\n    const { softwareVersion, url } = this.state;\r\n    if(softwareVersion === \"\" || url === \"\"){\r\n      alert ('Please enter all the fields')\r\n    }else{\r\n      this.setState({updateTwinLoading:true});\r\n      axios({\r\n        method: \"post\",\r\n        url: REACT_APP_VM_SERVER + REACT_APP_UPDATE_TWIN,\r\n        headers: { \"Allow-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"},\r\n        data: {\r\n          \"software_version\":softwareVersion,\r\n          \"url\":url\r\n        }\r\n      })\r\n      .then(response => {\r\n        console.log(response);\r\n        this.setState({ updateTwinLoading: false });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ updateTwinLoading: false });\r\n      });\r\n    }\r\n  }\r\n  handleInput = (e) => {\r\n    const { name, value } = e.target;\r\n    if(name==='url'){this.setState({url: value});}\r\n    if(name==='softwareVersion'){this.setState({softwareVersion: value});}\r\n    \r\n  }\r\n  render() {\r\n    const { url, softwareVersion } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.updateTwin}>\r\n          <div class=\"form-group\">\r\n            <label for=\"exampleInputEmail1\">Software version</label>\r\n            <input\r\n              type=\"software-version\"\r\n              class=\"form-control\"\r\n              id=\"software\"\r\n              value={softwareVersion}\r\n              name=\"softwareVersion\"\r\n              aria-describedby=\"softwareHelp\"\r\n              placeholder=\"Enter software version\"\r\n              onChange={this.handleInput}\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"exampleInputPassword1\">Blob URL</label>\r\n            <input\r\n              type=\"text\"\r\n              value={url}\r\n              name=\"url\"\r\n              class=\"form-control\"\r\n              id=\"blobUrl\"\r\n              placeholder=\"Enter Blob URL\"\r\n              onChange={this.handleInput}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"cust-btn\">Update twin</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport CircularProgressbar from 'react-circular-progressbar';\r\n\r\nfunction StyledProgressbar(props) {\r\n  return (\r\n    <CircularProgressbar\r\n      percentage={props.percentage}\r\n      text={props.text}\r\n      // Path width must be customized with strokeWidth,\r\n      // since it informs dimension calculations.\r\n      strokeWidth={5}\r\n      // You can override styles either by specifying this \"styles\" prop,\r\n      // or by overriding the default CSS here:\r\n      // https://github.com/iqnivek/react-circular-progressbar/blob/master/src/styles.css\r\n      styles={{\r\n        // Customize the root svg element\r\n        root: {},\r\n        // Customize the path, i.e. the part that's \"complete\"\r\n        path: {\r\n          // Tweak path color:\r\n          stroke: '#2c55ba',\r\n          // Tweak path to use flat or rounded ends:\r\n          strokeLinecap: 'butt',\r\n          // Tweak transition animation:\r\n          transition: 'stroke-dashoffset 0.5s ease 0s',\r\n        },\r\n        // Customize the circle behind the path\r\n        trail: {\r\n          // Tweak the trail color:\r\n          stroke: '#d6d6d6',\r\n        },\r\n        // Customize the text\r\n        text: {\r\n          // Tweak text color:\r\n          fill: '#2c55ba',\r\n          // Tweak text size:\r\n          fontSize: '30px',\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\nexport default StyledProgressbar;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport UploadTwin from '../uploadTwin/uploadTwin';\r\nimport './update.css'\r\nimport StyledProgressbar from '../common/styledProgressBar';\r\nconst {\r\n  REACT_APP_VM_SERVER,\r\n  REACT_APP_GETSTATUS,\r\n} = process.env;\r\nexport default class Update extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firmwareStatuses:[{\"otaStatus\": \"SoftwareUpdateComplete\", \"currentVersion\": \"1.0.0.006\", \"pendingVersion\": \"\"}],\r\n      getFirmwareLoading:false\r\n    }\r\n  }\r\n\r\n  \r\n  componentWillMount() {\r\n    this.getStatus();\r\n  }\r\n  \r\n  getStatus = () => {\r\n    this.setState({ getFirmwareLoading: true });\r\n    axios({\r\n      method: \"get\",\r\n      url: REACT_APP_VM_SERVER + REACT_APP_GETSTATUS\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        this.setState({ firmwareStatuses: [{...response.data}] });\r\n        this.setState({ getFirmwareLoading: false });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ getFirmwareLoading: false });\r\n      });\r\n  }\r\n\r\n  showStatus = (status, index) => {\r\n    let percentage = 0;\r\n    switch(status.otaStatus) {\r\n      case \"WaitingForUpdate\":\r\n        percentage = 5;\r\n        break;\r\n      case \"SoftwareUpdateinProgress\":\r\n        percentage = 15;\r\n        break;\r\n      case \"SoftwareUpdateComplete\":\r\n        percentage = 25;\r\n        break;\r\n      case \"DownloadComplete\":\r\n        percentage = 40;\r\n        break;\r\n      case \"UnzipComplete\":\r\n        percentage = 55;\r\n        break;\r\n      case \"ReadPackageDataComplete\":\r\n        percentage = 70;\r\n        break;\r\n      case \"PreInstallComplete\":\r\n        percentage = 85;\r\n        break;\r\n      case \"InstallComplete\":\r\n        percentage = 100;\r\n        break;\r\n      default:\r\n        percentage = 0;\r\n      }\r\n    return(\r\n      <div className=\"status-container\" key={index}>\r\n        <div className=\"status-details-container\">\r\n          <b>OTA Status: </b><span>{status.otaStatus}</span><br />\r\n          <b>Current version: </b><span>{status.currentVersion}</span><br />\r\n          <b>Pending Status: </b><span>{status.pendingVersion}</span><br />\r\n        </div>\r\n        <div style={{ width: '76px' }}>\r\n          <StyledProgressbar percentage={percentage} text={`${percentage}%`} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    const { firmwareStatuses, getFirmwareLoading } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-4\">\r\n            <UploadTwin />\r\n          </div>\r\n          <div className=\"col-4\">\r\n            <div className=\"card-container\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <div className=\"row\" style={{'cursor':'pointer'}} data-toggle=\"collapse\" href=\"#toggleFirmware\" role=\"button\" aria-expanded=\"false\" aria-controls=\"toggleFirmware\">\r\n                    <img className=\"img-upload\" src={require('./play.svg')} alt=\"...\" data-toggle=\"modal\" data-target=\"#showFirmwareDetails\"/>\r\n                    <p className=\"col-10 upload-text\">\r\n                      Update firmware\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div className=\"collapse multi-collapse\" id=\"toggleFirmware\">\r\n                <div className=\"card firm-card\">\r\n                  <div className=\"card-body\">\r\n                    {firmwareStatuses.map((status, index)=>this.showStatus(status, index))}\r\n                  </div>\r\n                  <div className=\"modal-footer\">\r\n                    <button type=\"button\" className=\"cust-btn\">View Logs</button>\r\n                    <img className=\"refresh-firm\" src={require('./refresh.svg')} title=\"refresh\" alt=\"...\" onClick={this.getStatus}/>\r\n                    {/* <img className=\"close-firm\" src={require('./close.svg')} title=\"close\" alt=\"...\" />\r\n                    <img className=\"upload-firm\" src={require('./upload.svg')} title=\"upload\" alt=\"...\" />\r\n                    <img className=\"send-firm\" src={require('./send.svg')} title=\"send\" alt=\"...\" /> */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Update from \"../update/update\";\r\nimport axios from \"axios\";\r\nimport \"./fileupload.css\";\r\nconst {\r\n  REACT_APP_SERVER,\r\n  REACT_APP_GETBLOBS,\r\n  REACT_APP_UPLOADBLOB\r\n} = process.env;\r\nexport default class FileUpload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blobs: [],\r\n      getBlobsLoading: false,\r\n      uploadFirmwareLoading: false\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getBlobDetails();\r\n  }\r\n\r\n  uploadFirmware = () => {\r\n    if (this.state.selectedFile) {\r\n      this.setState({ uploadFirmwareLoading: true });\r\n      const formData = new FormData();\r\n      formData.append(\"firmare\", this.state.selectedFile);\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"multipart/form-data\"\r\n        }\r\n      };\r\n      axios\r\n        .post(REACT_APP_SERVER + REACT_APP_UPLOADBLOB, formData, config)\r\n        .then(response => {\r\n          console.log(\"ki\", response);\r\n          this.setState({ uploadFirmwareLoading: false });\r\n          if (response.data.status) {\r\n            alert(response.data.message);\r\n            this.getBlobDetails();\r\n          } else {\r\n            alert(response.data.message);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n          alert(\"Error in upload\");\r\n          this.setState({ uploadFirmwareLoading: false });\r\n        });\r\n      document.getElementById(\"file\").value = \"\";\r\n      this.setState({ selectedFile: null });\r\n    } else {\r\n      alert(\"Please select a file\");\r\n    }\r\n  };\r\n\r\n  getBlobDetails = () => {\r\n    this.setState({ getBlobsLoading: true });\r\n    axios({\r\n      method: \"get\",\r\n      url: REACT_APP_SERVER + REACT_APP_GETBLOBS\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        if (response.data.status) {\r\n          this.setState({ blobs: response.data.blobs });\r\n        }\r\n        this.setState({ getBlobsLoading: false });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ getBlobsLoading: false });\r\n      });\r\n  };\r\n  showBlob = (blob, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <th scope=\"row\">{index + 1}</th>\r\n        <td>{blob.name}</td>\r\n        <td>\r\n          <span className={`blob-${index}`}>{`https://wrdm2chetanpackage.blob.core.windows.net/firmware/${blob.name}`}</span>\r\n        </td>\r\n      </tr>\r\n    );\r\n  };\r\n  handleselectedFile = event => {\r\n    event.preventDefault();\r\n    this.setState({ selectedFile: event.target.files[0] });\r\n  };\r\n  render() {\r\n    const { blobs, getBlobsLoading } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"upload-container\">\r\n          <div className=\"input-group mb-3\">\r\n            <div className=\"custom-file\">\r\n              <b>Select a file:</b>&nbsp;\r\n              <input\r\n                id=\"file\"\r\n                type=\"file\"\r\n                accept=\".gz, .zip\"\r\n                onChange={this.handleselectedFile}\r\n                name=\"myFile\"\r\n              />\r\n              <br />\r\n              <br />\r\n            </div>\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"cust-btn\"\r\n                onClick={this.uploadFirmware}\r\n              >\r\n                Upload File\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"table-container\">\r\n          <table className=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Firmware name</th>\r\n                <th scope=\"col\">Download URL</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {!getBlobsLoading &&\r\n                blobs.map((blob, index) => this.showBlob(blob, index))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <Update />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport FileUpload from './components/fileupload/fileupload';\nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={FileUpload} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}