{"version":3,"sources":["components/update/play.svg","components/update/refresh.svg","components/update/close.svg","components/update/upload.svg","components/update/send.svg","components/common/styledProgressBar.js","components/update/update.js","components/fileupload/fileupload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StyledProgressbar","props","react_default","a","createElement","dist_default","percentage","text","strokeWidth","styles","root","path","stroke","strokeLinecap","transition","trail","fill","fontSize","process","REACT_APP_VM_SERVER","REACT_APP_GETSTATUS","Update","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getStatus","setState","getFirmwareLoading","axios","method","url","then","response","console","log","firmwareStatuses","objectSpread","data","catch","err","showStatus","status","index","otaStatus","className","key","currentVersion","pendingVersion","style","width","styledProgressBar","concat","state","_this2","_this$state","src","require","alt","data-toggle","data-target","id","tabIndex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","map","title","onClick","Component","REACT_APP_SERVER","REACT_APP_GETBLOBS","REACT_APP_UPLOADBLOB","FileUpload","uploadFirmware","selectedFile","uploadFirmwareLoading","formData","FormData","append","post","headers","content-type","alert","message","getBlobDetails","error","document","getElementById","value","getBlobsLoading","blobs","showBlob","blob","scope","name","lastModified","handleselectedFile","event","preventDefault","target","files","accept","onChange","update_Update","App","BrowserRouter","Switch","Route","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.092c43be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.25419525.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.e41d1185.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.c2da7ba4.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.3affbd25.svg\";","module.exports = __webpack_public_path__ + \"static/media/send.47b88cfb.svg\";","import React from 'react';\r\nimport CircularProgressbar from 'react-circular-progressbar';\r\n\r\nfunction StyledProgressbar(props) {\r\n  return (\r\n    <CircularProgressbar\r\n      percentage={props.percentage}\r\n      text={props.text}\r\n      // Path width must be customized with strokeWidth,\r\n      // since it informs dimension calculations.\r\n      strokeWidth={5}\r\n      // You can override styles either by specifying this \"styles\" prop,\r\n      // or by overriding the default CSS here:\r\n      // https://github.com/iqnivek/react-circular-progressbar/blob/master/src/styles.css\r\n      styles={{\r\n        // Customize the root svg element\r\n        root: {},\r\n        // Customize the path, i.e. the part that's \"complete\"\r\n        path: {\r\n          // Tweak path color:\r\n          stroke: '#2c55ba',\r\n          // Tweak path to use flat or rounded ends:\r\n          strokeLinecap: 'butt',\r\n          // Tweak transition animation:\r\n          transition: 'stroke-dashoffset 0.5s ease 0s',\r\n        },\r\n        // Customize the circle behind the path\r\n        trail: {\r\n          // Tweak the trail color:\r\n          stroke: '#d6d6d6',\r\n        },\r\n        // Customize the text\r\n        text: {\r\n          // Tweak text color:\r\n          fill: '#2c55ba',\r\n          // Tweak text size:\r\n          fontSize: '30px',\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\nexport default StyledProgressbar;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport './update.css'\r\nimport StyledProgressbar from '../common/styledProgressBar';\r\nconst {\r\n  REACT_APP_VM_SERVER,\r\n  REACT_APP_GETSTATUS\r\n} = process.env;\r\nexport default class Update extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firmwareStatuses:[{\"otaStatus\": \"SoftwareUpdateComplete\", \"currentVersion\": \"1.0.0.006\", \"pendingVersion\": \"\"}],\r\n      getFirmwareLoading:false\r\n    }\r\n  }\r\n\r\n  \r\n  componentWillMount() {\r\n    this.getStatus();\r\n  }\r\n  \r\n  getStatus = () => {\r\n    this.setState({ getFirmwareLoading: true });\r\n    axios({\r\n      method: \"get\",\r\n      url: REACT_APP_VM_SERVER + REACT_APP_GETSTATUS\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        this.setState({ firmwareStatuses: [{...response.data}] });\r\n        this.setState({ getFirmwareLoading: false });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ getFirmwareLoading: false });\r\n      });\r\n  }\r\n\r\n  showStatus = (status, index) => {\r\n    let percentage = 0;\r\n    switch(status.otaStatus) {\r\n      case \"WaitingForUpdate\":\r\n        percentage = 5;\r\n        break;\r\n      case \"SoftwareUpdateinProgress\":\r\n        percentage = 15;\r\n        break;\r\n      case \"SoftwareUpdateComplete\":\r\n        percentage = 25;\r\n        break;\r\n      case \"DownloadComplete\":\r\n        percentage = 40;\r\n        break;\r\n      case \"UnzipComplete\":\r\n        percentage = 55;\r\n        break;\r\n      case \"ReadPackageDataComplete\":\r\n        percentage = 70;\r\n        break;\r\n      case \"PreInstallComplete\":\r\n        percentage = 85;\r\n        break;\r\n      case \"InstallComplete\":\r\n        percentage = 100;\r\n        break;\r\n      default:\r\n        percentage = 0;\r\n      }\r\n    return(\r\n      <div className=\"status-container\" key={index}>\r\n        <div className=\"status-details-container\">\r\n          <b>OTA Status: </b><span>{status.otaStatus}</span><br />\r\n          <b>Current version: </b><span>{status.currentVersion}</span><br />\r\n          <b>Pending Status: </b><span>{status.pendingVersion}</span><br />\r\n        </div>\r\n        <div style={{ width: '76px' }}>\r\n          <StyledProgressbar percentage={percentage} text={`${percentage}%`} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  render() {\r\n    const { firmwareStatuses, getFirmwareLoading } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"card-container\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row\">\r\n                <img className=\"img-upload\" src={require('./play.svg')} alt=\"...\" data-toggle=\"modal\" data-target=\"#showFirmwareDetails\"/>\r\n                <p className=\"col-10 upload-text\">\r\n                  <b>Firmware update: </b> Updates device Firmware. Use parameter FwPackageUri to specify the URI of the firmware file\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"modal fade\" id=\"showFirmwareDetails\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"showFirmwareDetails\" aria-hidden=\"true\">\r\n          <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalCenterTitle\">Firmware update</h5>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                {firmwareStatuses.map((status, index)=>this.showStatus(status, index))}\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"cust-btn\">View Logs</button>\r\n                <img className=\"refresh-firm\" src={require('./refresh.svg')} title=\"refresh\" alt=\"...\" onClick={this.getStatus}/>\r\n                <img className=\"close-firm\" src={require('./close.svg')} title=\"close\" alt=\"...\" />\r\n                <img className=\"upload-firm\" src={require('./upload.svg')} title=\"upload\" alt=\"...\" />\r\n                <img className=\"send-firm\" src={require('./send.svg')} title=\"send\" alt=\"...\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Update from \"../update/update\";\r\nimport axios from \"axios\";\r\nimport \"./fileupload.css\";\r\nconst {\r\n  REACT_APP_SERVER,\r\n  REACT_APP_GETBLOBS,\r\n  REACT_APP_UPLOADBLOB\r\n} = process.env;\r\nexport default class FileUpload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blobs: [],\r\n      getBlobsLoading: false,\r\n      uploadFirmwareLoading: false\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getBlobDetails();\r\n  }\r\n\r\n  uploadFirmware = () => {\r\n    if (this.state.selectedFile) {\r\n      this.setState({ uploadFirmwareLoading: true });\r\n      const formData = new FormData();\r\n      formData.append(\"firmare\", this.state.selectedFile);\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"multipart/form-data\"\r\n        }\r\n      };\r\n      axios\r\n        .post(REACT_APP_SERVER + REACT_APP_UPLOADBLOB, formData, config)\r\n        .then(response => {\r\n          console.log(\"ki\", response);\r\n          this.setState({ uploadFirmwareLoading: false });\r\n          if (response.data.status) {\r\n            alert(response.data.message);\r\n            this.getBlobDetails();\r\n          } else {\r\n            alert(response.data.message);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n          alert(\"Error in upload\");\r\n          this.setState({ uploadFirmwareLoading: false });\r\n        });\r\n      document.getElementById(\"file\").value = \"\";\r\n      this.setState({ selectedFile: null });\r\n    } else {\r\n      alert(\"Please select a file\");\r\n    }\r\n  };\r\n\r\n  getBlobDetails = () => {\r\n    this.setState({ getBlobsLoading: true });\r\n    axios({\r\n      method: \"get\",\r\n      url: REACT_APP_SERVER + REACT_APP_GETBLOBS\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        if (response.data.status) {\r\n          this.setState({ blobs: response.data.blobs });\r\n        }\r\n        this.setState({ getBlobsLoading: false });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ getBlobsLoading: false });\r\n      });\r\n  };\r\n  showBlob = (blob, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <th scope=\"row\">{index + 1}</th>\r\n        <td>{blob.name}</td>\r\n        <td>{blob.lastModified}</td>\r\n      </tr>\r\n    );\r\n  };\r\n  handleselectedFile = event => {\r\n    event.preventDefault();\r\n    this.setState({ selectedFile: event.target.files[0] });\r\n  };\r\n  render() {\r\n    const { blobs, getBlobsLoading } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"upload-container\">\r\n          <div className=\"input-group mb-3\">\r\n            <div className=\"custom-file\">\r\n              <b>Select a file:</b>&nbsp;\r\n              <input\r\n                id=\"file\"\r\n                type=\"file\"\r\n                accept=\".gz, .zip\"\r\n                onChange={this.handleselectedFile}\r\n                name=\"myFile\"\r\n              />\r\n              <br />\r\n              <br />\r\n            </div>\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"cust-btn\"\r\n                onClick={this.uploadFirmware}\r\n              >\r\n                Upload File\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"table-container\">\r\n          <table className=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Firmware name</th>\r\n                <th scope=\"col\">Date uploaded / Modified</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {!getBlobsLoading &&\r\n                blobs.map((blob, index) => this.showBlob(blob, index))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <Update />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport FileUpload from './components/fileupload/fileupload';\nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={FileUpload} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}