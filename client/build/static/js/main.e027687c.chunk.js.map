{"version":3,"sources":["components/update/play.svg","components/update/close.svg","components/update/upload.svg","components/update/send.svg","components/update/update.js","components/fileupload/fileupload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Update","react_default","a","createElement","className","src","require","alt","data-toggle","data-target","id","tabIndex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","style","width","aria-valuenow","aria-valuemin","aria-valuemax","title","Component","process","REACT_APP_SERVER","REACT_APP_GETBLOBS","REACT_APP_UPLOADBLOB","FileUpload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","uploadFirmware","setState","uploadFirmwareLoading","formData","FormData","append","state","selectedFile","axios","post","headers","content-type","then","response","console","log","data","status","getBlobDetails","catch","error","getBlobsLoading","method","url","blobs","err","showBlob","blob","index","key","scope","name","creationTime","handleselectedFile","event","preventDefault","target","files","_this2","_this$state","onChange","htmlFor","aria-describedby","onClick","map","update_Update","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e027687c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.25419525.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.c2da7ba4.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.3affbd25.svg\";","module.exports = __webpack_public_path__ + \"static/media/send.47b88cfb.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class Update extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"card-container\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row\">\r\n                <img className=\"img-upload\" src={require('./play.svg')} alt=\"...\" data-toggle=\"modal\" data-target=\"#showFirmwareDetails\"/>\r\n                <p className=\"col-10 upload-text\">\r\n                  <b>Firmware update: </b> Updates device Firmware. Use parameter FwPackageUri to specify the URI of the firmware file\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"modal fade\" id=\"showFirmwareDetails\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"showFirmwareDetails\" aria-hidden=\"true\">\r\n          <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalCenterTitle\">Firmware update</h5>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <h6>Firmware name</h6>\r\n                <div className=\"progress\">\r\n                  <div className=\"progress-bar\" role=\"progressbar\" style={{'width': '25%'}} aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">25%</div>\r\n                </div>\r\n                <hr/>\r\n              </div>\r\n              <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"cust-btn\">View Logs</button>\r\n                <img className=\"close-firm\" src={require('./close.svg')} title=\"close\" alt=\"...\" />\r\n                <img className=\"upload-firm\" src={require('./upload.svg')} title=\"upload\" alt=\"...\" />\r\n                <img className=\"send-firm\" src={require('./send.svg')} title=\"send\" alt=\"...\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Update from \"../update/update\";\r\nimport axios from \"axios\";\r\nimport \"./fileupload.css\";\r\nconst {\r\n  REACT_APP_SERVER,\r\n  REACT_APP_GETBLOBS,\r\n  REACT_APP_UPLOADBLOB\r\n} = process.env;\r\nexport default class FileUpload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blobs: [],\r\n      getBlobsLoading: false,\r\n      uploadFirmwareLoading: false\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getBlobDetails();\r\n  }\r\n\r\n  uploadFirmware = () => {\r\n    this.setState({ uploadFirmwareLoading: true });\r\n    const formData = new FormData();\r\n    formData.append(\"firmare\", this.state.selectedFile);\r\n    const config = {\r\n      headers: {\r\n        \"content-type\": \"multipart/form-data\"\r\n      }\r\n    };\r\n    axios\r\n      .post(REACT_APP_SERVER + REACT_APP_UPLOADBLOB, formData, config)\r\n      .then(response => {\r\n        console.log(response);\r\n        this.setState({ uploadFirmwareLoading: false });\r\n        if (response.data.status) {\r\n          this.getBlobDetails();\r\n        } else {\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.setState({ uploadFirmwareLoading: false });\r\n      });\r\n  };\r\n\r\n  getBlobDetails = () => {\r\n    this.setState({ getBlobsLoading: true });\r\n    axios({\r\n      method: \"get\",\r\n      url: REACT_APP_SERVER + REACT_APP_GETBLOBS\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        if (response.data.status) {\r\n          this.setState({ blobs: response.data.blobs });\r\n        }\r\n        this.setState({ getBlobsLoading: false });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({ getBlobsLoading: false });\r\n      });\r\n  };\r\n  showBlob = (blob, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <th scope=\"row\">{index + 1}</th>\r\n        <td>{blob.name}</td>\r\n        <td>{blob.creationTime}</td>\r\n      </tr>\r\n    );\r\n  };\r\n  handleselectedFile = event => {\r\n    event.preventDefault();\r\n    this.setState({selectedFile: event.target.files[0]})\r\n  };\r\n  render() {\r\n    const { blobs, getBlobsLoading } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"upload-container\">\r\n          <div className=\"input-group mb-3\">\r\n            <div className=\"custom-file\">\r\n              <input\r\n                type=\"file\"\r\n                className=\"custom-file-input\"\r\n                id=\"inputGroupFile02\"\r\n                onChange={this.handleselectedFile}\r\n              />\r\n              <label\r\n                className=\"custom-file-label\"\r\n                htmlFor=\"inputGroupFile02\"\r\n                aria-describedby=\"inputGroupFileAddon02\"\r\n              >\r\n                Select firmware file...\r\n              </label>\r\n            </div>\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"cust-btn\"\r\n                onClick={this.uploadFirmware}\r\n              >\r\n                Upload File\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"table-container\">\r\n          <table className=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Firmware name</th>\r\n                <th scope=\"col\">Date uploaded</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {!getBlobsLoading &&\r\n                blobs.map((blob, index) => this.showBlob(blob, index))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <Update />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport FileUpload from './components/fileupload/fileupload';\nimport './App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={FileUpload} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}